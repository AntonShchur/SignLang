import unittest
from audio_to_text import SpeechToText
from sign_recognizer import SignRecognizer
from lang_to_sign import LangToSign
from sign_to_lang import SignToLang

class TestLangToSign(unittest.TestCase):
    
    sentences_to_check = {
        "Вовк голосно вив у нічну темряву":"Вовк вити був голосно у темрява нічна",
        "Я бачив схід сонця":"Я бачити був схід сонце",
        "Великий слон плакав від болю":"Слон великий плакати був від біль",
        "Дівчина купила смачний хліб":"Дівчина купити був хліб смачний",
        "Моя сестра миє зелений посуд":"Сестра моя мити посуд зелений",
        "Батько завжди читає цікау книгу ввечері":"Батько читати завжди ввечері книга цікава",
        "Ми йдемо у кафе":"Ми йти у кафе",
        "Мати вишиває і дивиться телевізор":"Мати вишивати і дивитися телевізор",
        "Я буду кататись на велосипеді завтра":"Я катати буду завтра на велосипед",
        "Я житиму у Києві":"Я жити буду у Київ"
    }
    lang_to_sign = LangToSign()
    
    
    def test_explanatory(self):
        lang_to_sign = LangToSign()
        sentence_result = {
            "Вовк голосно вив у нічну темряву":"Вовк вити був голосно у темрява нічна",
            "Я бачив схід сонця":"Я бачити був схід сонце",
            "Великий слон плакав від болю":"Слон великий плакати був від біль",
            "Дівчина купила смачний хліб":"Дівчина купити був хліб смачний",
            "Моя сестра миє зелений посуд":"Сестра моя мити посуд зелений",
            "Батько завжди читає цікау книгу ввечері":"Батько читати завжди ввечері книга цікава",
            "Ми йдемо у кафе":"Ми йти у кафе",
            "Мати вишиває і дивиться телевізор":"Мати вишивати і дивитися телевізор",
            "Я буду кататись на велосипеді завтра":"Я катати буду завтра на велосипед",
            "Я житиму у Києві":"Я жити буду у Київ"
        }
        
        for key in sentence_result.keys():
            self.assertEqual(sentence_result[key].lower(), lang_to_sign.translate_sentence(key).lower())
            
            
    def test_audio_recognition(self):
        texts = [
            "Коли надвечір сонце повільно опускалося за обрій, залишаючи за собою багряно-золотий горизонт, на подвір'ї розпочалася вечірня праця.",
            "Попри всі труднощі та перепони, які зустрічалися на його шляху, він завжди знаходив сили йти вперед, адже мріяв здійснити задумане.",
            "Поки старий дуб хитав своїми величезними гілками під натиском сильного вітру, десь далеко чути було тихий спів пташок.",
            "Коли вона відкрила стару скриню, наповнену пожовклими листами і зотлілими фото, спогади дитинства несподівано нахлинули на неї, наче хвиля.",
            "Хоча місто вже потопало в сутінках, його вузькі вулички залишалися наповненими шумом і гамором, що створювали перехожі та вуличні музиканти."
        ]
        speech_to_text = SpeechToText()
        for i in range(5):
            file = f"./output_audio/line{i}.mp3"
            text = speech_to_text.speech_to_text(file)
            self.assertAlmostEqual(text.lower(), texts[i].lower())
            
            
    def test_video_recognition(self):
        sign_recognizer = SignRecognizer()
        videos = {"./video_test/1.mp4":['ми', 'з', 'друг', 'друг', 'ресторан', 'зустрітися'],
                  "./video_test/2.mp4":["газета", "нова", "містить", "новини", "цікавий"], 
        }
        for path in videos.keys():
            recognized_signs = sign_recognizer.recognize_sign_on_video(path)
            self.assertAlmostEqual("".join(videos[path]), "".join(recognized_signs))
            
            
            
if __name__ == "__main__":
    unittest.main()
